// <auto-generated />
using System;
using Inventory_M.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventoryM.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20230512041845_init_9")]
    partial class init_9
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Inventory_M.Models.Brands.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("Brand_Name")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Inventory_M.Models.Categories.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Category_Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Inventory_M.Models.adjustement.Adjustement", b =>
                {
                    b.Property<int>("AdjId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdjId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("Reference")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("UserAuth")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("AdjId");

                    b.HasIndex("ProductId");

                    b.ToTable("Adjustements");
                });

            modelBuilder.Entity("Inventory_M.Models.product.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Product_Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Recorder")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

           

            modelBuilder.Entity("Inventory_M.Models.sale.Sale", b =>
                {
                    b.Property<int>("saleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("saleId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Disc")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("TradesId")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("transno")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("saleId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TradesId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Inventory_M.Models.stockin.StockIn", b =>
                {
                    b.Property<int>("StockInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockInId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Quantite")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.Property<int>("qtynew")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("stockeby")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("StockInId");

                    b.HasIndex("ProductId");

                    b.HasIndex("VendorId");

                    b.ToTable("Stockins");
                });

            modelBuilder.Entity("Inventory_M.Models.tradespeople.Tradespeople", b =>
                {
                    b.Property<int>("TradesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TradesId"));

                    b.Property<string>("ADRESS")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Tele")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("matricule")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("TradesId");

                    b.ToTable("Tradespeoples");
                });

            modelBuilder.Entity("Inventory_M.Models.users_management.UserToRole", b =>
                {
                    b.Property<int>("UserToRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserToRoleId"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserToRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserToRole");
                });

            modelBuilder.Entity("Inventory_M.Models.users_management.role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("rolename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Inventory_M.Models.users_management.user", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Inventory_M.Models.vendor.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("VendorId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("Inventory_M.Models.adjustement.Adjustement", b =>
                {
                    b.HasOne("Inventory_M.Models.product.Product", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Inventory_M.Models.product.Product", b =>
                {
                    b.HasOne("Inventory_M.Models.Brands.Brand", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory_M.Models.Categories.Category", "Categories")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brands");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Inventory_M.Models.recod.Recod", b =>
                {
                    b.HasOne("Inventory_M.Models.adjustement.Adjustement", "adj")
                        .WithMany()
                        .HasForeignKey("AdjId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory_M.Models.Brands.Brand", "bran")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory_M.Models.Categories.Category", "categ")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory_M.Models.product.Product", "produits")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory_M.Models.stockin.StockIn", "stock")
                        .WithMany()
                        .HasForeignKey("StockInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory_M.Models.tradespeople.Tradespeople", "Trades")
                        .WithMany()
                        .HasForeignKey("TradesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory_M.Models.vendor.Vendor", "vend")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory_M.Models.sale.Sale", "sal")
                        .WithMany()
                        .HasForeignKey("saleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trades");

                    b.Navigation("adj");

                    b.Navigation("bran");

                    b.Navigation("categ");

                    b.Navigation("produits");

                    b.Navigation("sal");

                    b.Navigation("stock");

                    b.Navigation("vend");
                });

            modelBuilder.Entity("Inventory_M.Models.sale.Sale", b =>
                {
                    b.HasOne("Inventory_M.Models.product.Product", "produits")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory_M.Models.tradespeople.Tradespeople", "Trades")
                        .WithMany()
                        .HasForeignKey("TradesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trades");

                    b.Navigation("produits");
                });

            modelBuilder.Entity("Inventory_M.Models.stockin.StockIn", b =>
                {
                    b.HasOne("Inventory_M.Models.product.Product", "products")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory_M.Models.vendor.Vendor", "venders")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("products");

                    b.Navigation("venders");
                });

            modelBuilder.Entity("Inventory_M.Models.users_management.UserToRole", b =>
                {
                    b.HasOne("Inventory_M.Models.users_management.role", "Role")
                        .WithMany("UsersToRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory_M.Models.users_management.user", "User")
                        .WithMany("UsersToRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Inventory_M.Models.users_management.role", b =>
                {
                    b.Navigation("UsersToRoles");
                });

            modelBuilder.Entity("Inventory_M.Models.users_management.user", b =>
                {
                    b.Navigation("UsersToRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
